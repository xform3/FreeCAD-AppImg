env:
  global:
    # tag
    - DEPLOY_RELEASE="0.19_pre"
    #
    - FREECAD_RELEASE="0.18"
    # - DEPLOY_RELEASE=${DEPLOY_RELEASE:-$FREECAD_RELEASE}
    - OSX_PORTS_CACHE=${OSX_PORTS_CACHE:-FreeCAD/FreeCAD-ports-cache}
    - DEPLOY_REPO=${DEPLOY_REPO:-xform3/FreeCAD-AppImg}
    - DEPLOY=${DEPLOY:-1}

os:
  - linux
  # - osx
  # - windows

compiler: gcc
language: cpp

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get update -qq && sudo apt-get install -y desktop-file-utils jq zsync p7zip-full;
      apt-get download libc6;
      dpkg -x libc6*.deb libc6;
      fi
    # https://travis-ci.community/t/syntax-error-unexpected-keyword-rescue-expecting-keyword-end-in-homebrew/5623
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      brew update;
      brew install jq p7zip;
      fi

install:
  - eval "$(curl -fsSL "https://raw.githubusercontent.com/${OSX_PORTS_CACHE}/v${FREECAD_RELEASE}/travis-helpers.sh")"
  - # Temp patch
  - |
    gitHub_release_named()
    {
       namedReleaseAsJSON=$(gitHub_releases ${1} | jq -r --arg releaseName ${2-$release} '.[] | select(.tag_name==$releaseName)')
       echo ${namedReleaseAsJSON}
    }
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      curl -LO https://raw.githubusercontent.com/AppImage/AppImages/master/pkg2appimage;
      wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage";
      chmod a+x appimagetool-x86_64.AppImage;
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      . $HOME/miniconda/etc/profile.d/conda.sh;
      fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      . $HOME/miniconda/etc/profile.d/conda.sh;
      fi
  - if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      wget https://repo.anaconda.com/pkgs/misc/conda-execs/conda-latest-win-64.exe -O conda.exe --no-check-certificate;
      cmd.exe //C 'conda.exe create -y -q -p C:\conda conda conda-build=3.18.10 conda-verify python=3.7 -c conda-forge';
      cmd.exe //C 'call C:\conda\Scripts\activate';
      fi
  - if [ "$TRAVIS_OS_NAME" != "windows" ]; then
      hash -r;
      conda init bash;
      conda activate base;
      conda config --set always_yes yes --set changeps1 no;
      conda update -q --all;
      fi
  - wget "https://github.com/FreeCAD/FreeCAD/releases/download/0.18/FreeCAD.0_18.Offline.Doc.7z"
  - 7z x FreeCAD.0_18.Offline.Doc.7z

script:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      cd conda/linux_stable;
      bash ./linux_stable.sh;
      cd ../linux_dev;
      bash ./linux_dev.sh;
      cd ..;
      fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      cd conda/osx_stable;
      bash ./osx_stable.sh;
      cd ../osx_dev;
      bash ./osx_dev.sh;
      cd ..;
      fi
  - if [ "$TRAVIS_OS_NAME" == "windows" ]; then
      cp conda.exe conda/win_dev;
      cd conda/win_dev;
      cmd.exe //C 'win_dev.bat';
      cd ..;
      fi

after_success:
  - # Deploy stable builds to latest
  - # Use an authentication token to avoid rate limit
  - DEPLOY_RELEASE_STABLE="$(curl -s "https://api.github.com/repos/FreeCAD/FreeCAD/tags" | jq -r .[0].name)"
  - # Uncomment to manually set the tag name
  - # DEPLOY_RELEASE_STABLE="0.18.3"
  - echo "$DEPLOY_RELEASE_STABLE"
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE_STABLE})
      gitHub_prune_assets_for_release_named $deployContext ".AppImage" 0
      export DEPLOYMENT_ARCHIVE=$(ls linux_stable/*.AppImage)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux_stable/*.AppImage.zsync)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux_stable/*.AppImage-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE})
      gitHub_prune_assets_for_release_named $deployContext ".AppImage" 0
      export DEPLOYMENT_ARCHIVE=$(ls linux_dev/*.AppImage)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux_dev/*.AppImage.zsync)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux_dev/*.AppImage-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE_STABLE})
      gitHub_prune_assets_for_release_named $deployContext ".dmg" 0
      export DEPLOYMENT_ARCHIVE=$(ls osx_stable/*.dmg)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls osx_stable/*.dmg-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE})
      gitHub_prune_assets_for_release_named $deployContext ".dmg" 0
      export DEPLOYMENT_ARCHIVE=$(ls osx_dev/*.dmg)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls osx_dev/*.dmg-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "windows" -a "${DEPLOY}" == "1" ]; then
      # export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE_STABLE})
      # gitHub_prune_assets_for_release_named $deployContext "x86_64.7z" 0
      # export DEPLOYMENT_ARCHIVE=$(ls win_stable/*x86_64.7z)
      # gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      # export DEPLOYMENT_ARCHIVE=$(ls win_stable/*x86_64.7z-SHA256.txt)
      # gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE})
      gitHub_prune_assets_for_release_named $deployContext "x86_64.7z" 0
      gitHub_prune_assets_for_release_named $deployContext "x86_64.7z-SHA256.txt" 0
      export DEPLOYMENT_ARCHIVE=$(ls win_dev/*x86_64.7z)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls win_dev/*x86_64.7z-SHA256.txt)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
